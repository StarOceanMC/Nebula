From 063abc427a8ad7c381f923e804bd087730f576a6 Mon Sep 17 00:00:00 2001
From: Lovely_xianxian <xyx_dada@outlook.com>
Date: Sat, 25 Apr 2020 20:09:18 +0800
Subject: [PATCH] Configurable Spawn Chunks Ticking

---
 .../net/minecraft/server/WorldServer.java     | 24 +++++++++++--------
 .../xianxian/mc/nebula/NebulaWorldConfig.java |  6 +++++
 2 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 11b4d62c4..183d56e73 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -2402,12 +2402,14 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         // with level 31 for the non-border spawn chunks
         ChunkProviderServer chunkproviderserver = this.getChunkProvider();
         int tickRadius = radiusInBlocks - 16;
+        int ticketLevelSpawnChunks = this.nebulaConfig.doNotTickSpawnChunks ? 0 : 2;
+        int ticketLevelSpawnBorder = this.nebulaConfig.doNotTickSpawnChunks ? 0 : 1;
 
         // add ticking chunks
         for (int x = -tickRadius; x <= tickRadius; x += 16) {
             for (int z = -tickRadius; z <= tickRadius; z += 16) {
                 // radius of 2 will have the current chunk be level 31
-                chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, z)), 2, Unit.INSTANCE);
+                chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, z)), ticketLevelSpawnChunks, Unit.INSTANCE);
             }
         }
 
@@ -2416,17 +2418,17 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         // add border along x axis (including corner chunks)
         for (int x = -radiusInBlocks; x <= radiusInBlocks; x += 16) {
             // top
-            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, radiusInBlocks)), 1, Unit.INSTANCE); // level 32
+            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, radiusInBlocks)), ticketLevelSpawnBorder, Unit.INSTANCE); // level 32
             // bottom
-            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, -radiusInBlocks)), 1, Unit.INSTANCE); // level 32
+            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, -radiusInBlocks)), ticketLevelSpawnBorder, Unit.INSTANCE); // level 32
         }
 
         // add border along z axis (excluding corner chunks)
         for (int z = -radiusInBlocks + 16; z < radiusInBlocks; z += 16) {
             // right
-            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
+            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(radiusInBlocks, 0, z)), ticketLevelSpawnBorder, Unit.INSTANCE); // level 32
             // left
-            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(-radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
+            chunkproviderserver.addTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(-radiusInBlocks, 0, z)), ticketLevelSpawnBorder, Unit.INSTANCE); // level 32
         }
 
         MCUtil.getSpiralOutChunks(spawn, radiusInBlocks >> 4).forEach(pair -> {
@@ -2441,12 +2443,14 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         // with level 31 for the non-border spawn chunks
         ChunkProviderServer chunkproviderserver = this.getChunkProvider();
         int tickRadius = radiusInBlocks - 16;
+        int ticketLevelSpawnChunks = this.nebulaConfig.doNotTickSpawnChunks ? 0 : 2;
+        int ticketLevelSpawnBorder = this.nebulaConfig.doNotTickSpawnChunks ? 0 : 1;
 
         // remove ticking chunks
         for (int x = -tickRadius; x <= tickRadius; x += 16) {
             for (int z = -tickRadius; z <= tickRadius; z += 16) {
                 // radius of 2 will have the current chunk be level 31
-                chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, z)), 2, Unit.INSTANCE);
+                chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, z)), ticketLevelSpawnChunks, Unit.INSTANCE);
             }
         }
 
@@ -2455,17 +2459,17 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         // remove border along x axis (including corner chunks)
         for (int x = -radiusInBlocks; x <= radiusInBlocks; x += 16) {
             // top
-            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, radiusInBlocks)), 1, Unit.INSTANCE); // level 32
+            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, radiusInBlocks)), ticketLevelSpawnBorder, Unit.INSTANCE); // level 32
             // bottom
-            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, -radiusInBlocks)), 1, Unit.INSTANCE); // level 32
+            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(x, 0, -radiusInBlocks)), ticketLevelSpawnBorder, Unit.INSTANCE); // level 32
         }
 
         // remove border along z axis (excluding corner chunks)
         for (int z = -radiusInBlocks + 16; z < radiusInBlocks; z += 16) {
             // right
-            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
+            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(radiusInBlocks, 0, z)), ticketLevelSpawnBorder, Unit.INSTANCE); // level 32
             // left
-            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(-radiusInBlocks, 0, z)), 1, Unit.INSTANCE); // level 32
+            chunkproviderserver.removeTicket(TicketType.START, new ChunkCoordIntPair(spawn.add(-radiusInBlocks, 0, z)), ticketLevelSpawnBorder, Unit.INSTANCE); // level 32
         }
     }
     // Paper end
diff --git a/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java b/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java
index 80d318213..9288a8333 100644
--- a/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java
+++ b/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java
@@ -93,4 +93,10 @@ public class NebulaWorldConfig {
     private void doDolphinReceiveConduitPower() {
         doDolphinReceiveConduitPower = getBoolean("do-dolphin-receive-conduit-power", true);
     }
+
+
+    public boolean doNotTickSpawnChunks = false;
+	private void doNotTickSpawnChunks() {
+	    doNotTickSpawnChunks = getBoolean("do-not-tick-spawn-chunks", false);
+    }
 }
\ No newline at end of file
-- 
2.28.0

