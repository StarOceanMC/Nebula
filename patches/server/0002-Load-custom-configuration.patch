From aa50d025f55ed5809414607cc484283cd163179b Mon Sep 17 00:00:00 2001
From: Lovely_xianxian <xyx_dada@outlook.com>
Date: Fri, 27 Dec 2019 21:34:51 +0800
Subject: [PATCH] Load custom configuration

---
 .../net/minecraft/server/DedicatedServer.java |  10 +-
 src/main/java/net/minecraft/server/World.java |   2 +
 .../org/bukkit/craftbukkit/CraftServer.java   |   1 +
 .../java/org/bukkit/craftbukkit/Main.java     |   8 +
 .../xianxian/mc/nebula/NebulaCommand.java     |  43 +++++
 .../java/xianxian/mc/nebula/NebulaConfig.java | 177 ++++++++++++++++++
 .../xianxian/mc/nebula/NebulaWorldConfig.java |  66 +++++++
 7 files changed, 306 insertions(+), 1 deletion(-)
 create mode 100644 src/main/java/xianxian/mc/nebula/NebulaCommand.java
 create mode 100644 src/main/java/xianxian/mc/nebula/NebulaConfig.java
 create mode 100644 src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java

diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index ede436939..99e2584df 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -195,7 +195,15 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         // Paper end
         com.tuinity.tuinity.config.TuinityConfig.init((File) options.valueOf("tuinity-settings")); // Tuinity - Server Config
-
+        // Nebula start - Load custom configuration
+        try {
+            xianxian.mc.nebula.NebulaConfig.init((File) options.valueOf("nebula-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load nebula server configuration", e);
+            return false;
+        }
+        xianxian.mc.nebula.NebulaConfig.registerCommands();
+        // Nebula end
         this.setSpawnAnimals(dedicatedserverproperties.spawnAnimals);
         this.setSpawnNPCs(dedicatedserverproperties.spawnNpcs);
         this.setPVP(dedicatedserverproperties.pvp);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 2b5d0ecd0..a92ec7f8c 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -94,6 +94,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     // Paper start - yes this is hacky as shit
     RegionLimitedWorldAccess regionLimited;
     World originalWorld;
+    public xianxian.mc.nebula.NebulaWorldConfig nebulaConfig; // Nebula - Load custom configuration
     public World regionLimited(RegionLimitedWorldAccess limitedWorldAccess) {
         try {
             World clone = (World) super.clone();
@@ -132,6 +133,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     protected World(WorldData worlddata, DimensionManager dimensionmanager, BiFunction<World, WorldProvider, IChunkProvider> bifunction, GameProfilerFiller gameprofilerfiller, boolean flag, org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(worlddata.getName(), this.spigotConfig); // Paper
+        this.nebulaConfig = new xianxian.mc.nebula.NebulaWorldConfig(worlddata.getName(), this.spigotConfig); // Nebula - Load custom configuration
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this.paperConfig) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
         this.tuinityConfig = new com.tuinity.tuinity.config.TuinityConfig.WorldConfig(worlddata.getName()); // Tuinity - Server Config
         this.generator = gen;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index bb1d45a94..582f8c619 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -836,6 +836,7 @@ public final class CraftServer implements Server {
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
             world.tuinityConfig.init(); // Tuinity - Server Config
+            world.nebulaConfig.init(); // Nebula - Load custom configuration
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 2666940e8..082b9091e 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -152,6 +152,14 @@ public class Main {
                         .defaultsTo("Unknown Server")
                         .describedAs("Name");
                 // Paper end
+                
+                // Nebula start - Load custom configuration
+                acceptsAll(asList("S", "nebula-settings"), "File for nebula settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("nebula.yml"))
+                .describedAs("Yml file");
+                // Nebula end
             }
         };
 
diff --git a/src/main/java/xianxian/mc/nebula/NebulaCommand.java b/src/main/java/xianxian/mc/nebula/NebulaCommand.java
new file mode 100644
index 000000000..35cf0291a
--- /dev/null
+++ b/src/main/java/xianxian/mc/nebula/NebulaCommand.java
@@ -0,0 +1,43 @@
+package xianxian.mc.nebula;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.Locale;
+
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+public class NebulaCommand extends Command{
+
+	protected NebulaCommand() {
+		super("nebula", "Nebula related features", "/nebula version", Arrays.asList());
+	}
+
+	@Override
+	public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+		if (args.length == 1)
+			switch (args[0].toLowerCase(Locale.ENGLISH)) {
+				case "ver":
+				case "version":
+					Command ver = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+					if (ver != null) {
+						ver.execute(sender, commandLabel, new String[0]);
+						break;
+					}
+				default:
+					sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+					return false;
+			}
+		else 
+			return false;
+		return true;
+	}
+
+	@Override
+	public List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {
+		if (args.length <= 1)
+            return Arrays.asList("version");
+		return super.tabComplete(sender, alias, args);
+	}
+}
diff --git a/src/main/java/xianxian/mc/nebula/NebulaConfig.java b/src/main/java/xianxian/mc/nebula/NebulaConfig.java
new file mode 100644
index 000000000..3d10764c3
--- /dev/null
+++ b/src/main/java/xianxian/mc/nebula/NebulaConfig.java
@@ -0,0 +1,177 @@
+package xianxian.mc.nebula;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import com.google.common.base.Throwables;
+
+import net.minecraft.server.MinecraftServer;
+
+public class NebulaConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for Nebula.\n"
+            + "As you can see, there's tons to configure. Some options may impact gameplay\n"
+            + "But we haven't any description on this yet \n";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    static int version;
+    static Map<String, Command> commands;
+    private static boolean verbose;
+    private static boolean fatalError;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load paper.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = new HashMap<String, Command>();
+        commands.put("nebula", new NebulaCommand());
+
+        version = getInt("config-version", 20);
+        set("config-version", 20);
+        readConfig(NebulaConfig.class, null);
+    }
+
+    protected static void logError(String s) {
+        Bukkit.getLogger().severe(s);
+    }
+
+    protected static void fatal(String s) {
+        fatalError = true;
+        throw new RuntimeException("Fatal nebula.yml config error: " + s);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
+        }
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Paper", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static final Pattern SPACE = Pattern.compile(" ");
+    private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+    public static int getSeconds(String str) {
+        str = SPACE.matcher(str).replaceAll("");
+        final char unit = str.charAt(str.length() - 1);
+        str = NOT_NUMERIC.matcher(str).replaceAll("");
+        double num;
+        try {
+            num = Double.parseDouble(str);
+        } catch (Exception e) {
+            num = 0D;
+        }
+        switch (unit) {
+            case 'd': num *= (double) 60*60*24; break;
+            case 'h': num *= (double) 60*60; break;
+            case 'm': num *= (double) 60; break;
+            default: case 's': break;
+        }
+        return (int) num;
+    }
+
+    protected static String timeSummary(int seconds) {
+        String time = "";
+
+        if (seconds > 60 * 60 * 24) {
+            time += TimeUnit.SECONDS.toDays(seconds) + "d";
+            seconds %= 60 * 60 * 24;
+        }
+
+        if (seconds > 60 * 60) {
+            time += TimeUnit.SECONDS.toHours(seconds) + "h";
+            seconds %= 60 * 60;
+        }
+
+        if (seconds > 0) {
+            time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+        }
+        return time;
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+}
diff --git a/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java b/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java
new file mode 100644
index 000000000..cc37412c4
--- /dev/null
+++ b/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java
@@ -0,0 +1,66 @@
+package xianxian.mc.nebula;
+
+import java.util.List;
+
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.spigotmc.SpigotWorldConfig;
+
+import static xianxian.mc.nebula.NebulaConfig.log;
+
+// Almost the same as PaperWorldConfig
+public class NebulaWorldConfig {
+
+	private final String worldName;
+    private final SpigotWorldConfig spigotConfig;
+    private final YamlConfiguration config;
+    private boolean verbose;
+
+    public NebulaWorldConfig(String worldName, SpigotWorldConfig spigotConfig) {
+        this.worldName = worldName;
+        this.spigotConfig = spigotConfig;
+        this.config = NebulaConfig.config;
+        init();
+    }
+
+    public void init() {
+        log("-------- Nebula World Settings For [" + worldName + "] --------");
+        NebulaConfig.readConfig(NebulaWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
+        if (config.get("world-settings." + worldName + "." + path) != null) {
+            config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path));
+    }
+
+    private float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    private <T> List<T> getList(String path, List<T> def) {
+        config.addDefault("world-settings.default." + path, def);
+        return (List<T>) config.getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
+    }
+}
-- 
2.25.0

