From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lovely_xianxian <xyx_dada@outlook.com>
Date: Fri, 5 Aug 2022 21:24:49 +0800
Subject: [PATCH] Server configuration


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index bdd6560fe85950b0a857a949cb38c044da44ca6b..2648ddf3532b5c03110867933ba630f477cfb48f 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -226,7 +226,15 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
-
+        // Nebula start - Server configuration
+            try {
+                org.staroceanmc.nebula.config.NebulaConfig.init((java.io.File) options.valueOf("nebula-settings"));
+            } catch (Exception e) {
+                DedicatedServer.LOGGER.error("Unable to load nebula server configuration", e);
+                return false;
+            }
+        org.staroceanmc.nebula.config.NebulaConfig.registerCommands();
+        // Nebula end
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 5a2a1d394852d39ea576624586f7fa736dec807c..74392b4bda8dfe2e370fddfdf604241ce0642a57 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -172,6 +172,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return this.paperConfig;
     }
     // Paper end
+    public final org.staroceanmc.nebula.config.NebulaWorldConfig nebulaConfig;
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
@@ -274,6 +275,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, Holder<DimensionType> holder, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.function.Function<org.spigotmc.SpigotWorldConfig, io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, java.util.concurrent.Executor executor) { // Paper - Async-Anti-Xray - Pass executor
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
+        this.nebulaConfig = new org.staroceanmc.nebula.config.NebulaWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Nebula - Server configuration
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d96571dfd03945a45f2e3c947871e7a6381e4a51..ff0803c07b09d9830afdd8176bfb4ce0e50b9e1c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -959,6 +959,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
+        org.staroceanmc.nebula.config.NebulaConfig.init((java.io.File) console.options.valueOf("nebula-settings")); // Nebula - Server configuration
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -974,6 +975,7 @@ public final class CraftServer implements Server {
                 }
             }
             world.spigotConfig.init(); // Spigot
+            world.nebulaConfig.init(); // Nebula
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index cef8fba237369528c1a00410f7aa92b33df7119f..a11d2f40def4f8ebe27bd2adcdf733254b8bf75a 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -165,6 +165,13 @@ public class Main {
                         .defaultsTo("Unknown Server")
                         .describedAs("Name");
                 // Paper end
+                // Nebula start - Load custom configuration
+                    acceptsAll(asList("S", "nebula-settings"), "File for nebula settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("config/nebula.yml"))
+                        .describedAs("Yml file");
+                // Nebula end
             }
         };
 
diff --git a/src/main/java/org/staroceanmc/nebula/command/NebulaCommand.java b/src/main/java/org/staroceanmc/nebula/command/NebulaCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf2de1e6be4226f736367ec799170d36c5ad952a
--- /dev/null
+++ b/src/main/java/org/staroceanmc/nebula/command/NebulaCommand.java
@@ -0,0 +1,43 @@
+package org.staroceanmc.nebula.command;
+
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.Locale;
+
+public class NebulaCommand extends Command {
+
+    public NebulaCommand() {
+        super("nebula", "Nebula related features", "/nebula version", Arrays.asList());
+    }
+
+    @Override public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (args.length == 1)
+            switch (args[0].toLowerCase(Locale.ENGLISH)) {
+                case "ver":
+                case "version":
+                    Command ver =
+                        org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+                    if (ver != null) {
+                        ver.execute(sender, commandLabel, new String[0]);
+                        break;
+                    }
+                default:
+                    sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+                    return false;
+            }
+        else
+            return false;
+        return true;
+    }
+
+    @Override public List<String> tabComplete(CommandSender sender, String alias, String[] args)
+        throws IllegalArgumentException {
+        if (args.length <= 1)
+            return Arrays.asList("version");
+        return super.tabComplete(sender, alias, args);
+    }
+}
diff --git a/src/main/java/org/staroceanmc/nebula/config/NebulaConfig.java b/src/main/java/org/staroceanmc/nebula/config/NebulaConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..a978949494227909ea7edd361131b6921d46d179
--- /dev/null
+++ b/src/main/java/org/staroceanmc/nebula/config/NebulaConfig.java
@@ -0,0 +1,193 @@
+package org.staroceanmc.nebula.config;
+
+import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.staroceanmc.nebula.command.NebulaCommand;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+
+public class NebulaConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for Nebula.\n"
+        + "As you can see, there's tons to configure. Some options may impact gameplay\n"
+        + "But we haven't any description on this yet \n";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    static int version;
+    static Map<String, Command> commands;
+    private static boolean verbose;
+    private static boolean fatalError;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger()
+                .log(Level.SEVERE, "Could not load paper.yml, please correct your syntax errors",
+                    ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = new HashMap<String, Command>();
+        commands.put("nebula", new NebulaCommand());
+
+        version = getInt("config-version", CURRENT_VERSION);
+        set("config-version", CURRENT_VERSION);
+        readConfig(NebulaConfig.class, null);
+    }
+
+    protected static void logError(String s) {
+        Bukkit.getLogger().severe(s);
+    }
+
+    protected static void fatal(String s) {
+        fatalError = true;
+        throw new RuntimeException("Fatal nebula.yml config error: " + s);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
+        }
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap()
+                .register(entry.getKey(), "Nebula", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static final Pattern SPACE = Pattern.compile(" ");
+    private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+
+    public static int getSeconds(String str) {
+        str = SPACE.matcher(str).replaceAll("");
+        final char unit = str.charAt(str.length() - 1);
+        str = NOT_NUMERIC.matcher(str).replaceAll("");
+        double num;
+        try {
+            num = Double.parseDouble(str);
+        } catch (Exception e) {
+            num = 0D;
+        }
+        switch (unit) {
+            case 'd':
+                num *= (double)60 * 60 * 24;
+                break;
+            case 'h':
+                num *= (double)60 * 60;
+                break;
+            case 'm':
+                num *= (double)60;
+                break;
+            default:
+            case 's':
+                break;
+        }
+        return (int)num;
+    }
+
+    protected static String timeSummary(int seconds) {
+        String time = "";
+
+        if (seconds > 60 * 60 * 24) {
+            time += TimeUnit.SECONDS.toDays(seconds) + "d";
+            seconds %= 60 * 60 * 24;
+        }
+
+        if (seconds > 60 * 60) {
+            time += TimeUnit.SECONDS.toHours(seconds) + "h";
+            seconds %= 60 * 60;
+        }
+
+        if (seconds > 0) {
+            time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+        }
+        return time;
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float)getDouble(path, (double)def);
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>)config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    //#################### CONFIG AREA ####################
+
+    private static final int CURRENT_VERSION = 0;
+
+}
diff --git a/src/main/java/org/staroceanmc/nebula/config/NebulaWorldConfig.java b/src/main/java/org/staroceanmc/nebula/config/NebulaWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..e4a38b7b762dbbd394e22b9616ac2a3f99b3a937
--- /dev/null
+++ b/src/main/java/org/staroceanmc/nebula/config/NebulaWorldConfig.java
@@ -0,0 +1,72 @@
+package org.staroceanmc.nebula.config;
+
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.spigotmc.SpigotWorldConfig;
+
+import java.util.List;
+
+import static org.staroceanmc.nebula.config.NebulaConfig.log;
+
+public class NebulaWorldConfig {
+
+    private final String worldName;
+    private final SpigotWorldConfig spigotConfig;
+    private final YamlConfiguration config;
+    private boolean verbose;
+
+    public NebulaWorldConfig(String worldName, SpigotWorldConfig spigotConfig) {
+        this.worldName = worldName;
+        this.spigotConfig = spigotConfig;
+        this.config = NebulaConfig.config;
+        init();
+    }
+
+    public void init() {
+        log("-------- Nebula World Settings For [" + worldName + "] --------");
+        NebulaConfig.readConfig(NebulaWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        config.set("world-settings.default." + path, val);
+        if (config.get("world-settings." + worldName + "." + path) != null) {
+            config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path,
+            config.getBoolean("world-settings.default." + path));
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getDouble("world-settings." + worldName + "." + path,
+            config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getInt("world-settings." + worldName + "." + path,
+            config.getInt("world-settings.default." + path));
+    }
+
+    private float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float)getDouble(path, (double)def);
+    }
+
+    private <T> List<T> getList(String path, List<T> def) {
+        config.addDefault("world-settings.default." + path, def);
+        return (List<T>)config.getList("world-settings." + worldName + "." + path,
+            config.getList("world-settings.default." + path));
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault("world-settings.default." + path, def);
+        return config.getString("world-settings." + worldName + "." + path,
+            config.getString("world-settings.default." + path));
+    }
+
+    //#################### CONFIG AREA ####################
+}
\ No newline at end of file
