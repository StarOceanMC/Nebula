From 082fc4cf78c83425961c3b877a82c728f0c4a5b4 Mon Sep 17 00:00:00 2001
From: Lovely_xianxian <xyx_dada@outlook.com>
Date: Tue, 25 Feb 2020 10:52:01 +0800
Subject: [PATCH] Configurable TNT chunk loading

---
 .../net/minecraft/server/EntityTNTPrimed.java | 39 +++++++++++++++++++
 .../java/net/minecraft/server/TicketType.java |  2 +
 .../xianxian/mc/nebula/NebulaWorldConfig.java |  4 ++
 3 files changed, 45 insertions(+)

diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index 9c31edade..ea9b61385 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -11,6 +11,9 @@ public class EntityTNTPrimed extends Entity {
     private int fuseTicks;
     public float yield = 4; // CraftBukkit - add field
     public boolean isIncendiary = false; // CraftBukkit - add field
+    
+    private int prevChunkX = Integer.MIN_VALUE;
+    private int prevChunkZ = Integer.MIN_VALUE;
 
     public EntityTNTPrimed(EntityTypes<? extends EntityTNTPrimed> entitytypes, World world) {
         super(entitytypes, world);
@@ -54,6 +57,31 @@ public class EntityTNTPrimed extends Entity {
         }
 
         this.move(EnumMoveType.SELF, this.getMot());
+        // Nebula start - Configurable TNT chunk loading
+        if (this.world.nebulaConfig.loadChunksForTNT) {
+            if (this.prevChunkX != chunkX || this.prevChunkZ != chunkZ) {
+                if (this.prevChunkX == Integer.MIN_VALUE || this.prevChunkZ == Integer.MIN_VALUE) {
+                    this.prevChunkX = chunkX;
+                    this.prevChunkZ = chunkZ;
+                    
+                    if (!this.world.isClientSide) {
+                        ChunkMapDistance distanceManager = ((WorldServer) this.world).getChunkProvider().playerChunkMap.chunkDistanceManager;
+                        distanceManager.addTicketAtLevel(TicketType.ENTITY, new ChunkCoordIntPair(chunkX, chunkZ), 31, this);
+                        this.world.getChunkAt(chunkX, chunkZ);
+                    }
+                } else {
+                    if (!this.world.isClientSide) {
+                        ChunkMapDistance distanceManager = ((WorldServer) this.world).getChunkProvider().playerChunkMap.chunkDistanceManager;
+                        distanceManager.removeTicketAtLevel(TicketType.ENTITY, new ChunkCoordIntPair(prevChunkX, prevChunkZ), 31, this);
+                        this.prevChunkX = chunkX;
+                        this.prevChunkZ = chunkZ;
+                        distanceManager.addTicketAtLevel(TicketType.ENTITY, new ChunkCoordIntPair(chunkX, chunkZ), 31, this);
+                        this.world.getChunkAt(chunkX, chunkZ);
+                    }
+                }
+            }
+        }
+        // Nebula end
         // Paper start - Configurable TNT entity height nerf
         if (this.world.paperConfig.entityTNTHeightNerf != 0 && this.locY() > this.world.paperConfig.entityTNTHeightNerf) {
             this.die();
@@ -176,4 +204,15 @@ public class EntityTNTPrimed extends Entity {
         return !world.paperConfig.preventTntFromMovingInWater && super.pushedByWater();
     }
     // Paper end
+    
+    // Nebula start - Remove all tickets after remove
+    @Override
+    public void die() {
+        super.die();
+        if (this.world.nebulaConfig.loadChunksForTNT) {
+            ChunkMapDistance distanceManager = ((WorldServer) this.world).getChunkProvider().playerChunkMap.chunkDistanceManager;
+            distanceManager.removeAllTicketsFor(TicketType.ENTITY, 31, this);
+        }
+    }
+    // Nebula end
 }
diff --git a/src/main/java/net/minecraft/server/TicketType.java b/src/main/java/net/minecraft/server/TicketType.java
index 4657b05a4..4a04bad8b 100644
--- a/src/main/java/net/minecraft/server/TicketType.java
+++ b/src/main/java/net/minecraft/server/TicketType.java
@@ -1,3 +1,4 @@
+
 package net.minecraft.server;
 
 import java.util.Comparator;
@@ -28,6 +29,7 @@ public class TicketType<T> {
     public static final TicketType<ChunkCoordIntPair> URGENT = a("urgent", Comparator.comparingLong(ChunkCoordIntPair::pair), 300); // Paper
     public static final TicketType<Long> DELAYED_UNLOAD = a("delayed_unload", Long::compareTo); // Tuinity - delay chunk unloads
     public static final TicketType<Long> REQUIRED_LOAD = a("required_load", Long::compareTo); // Tuinity - make sure getChunkAt does not fail
+    public static final TicketType<Entity> ENTITY = a("entity", (Entity e1, Entity e2) -> e1.getUniqueID().compareTo(e2.getUniqueID()), 20); // Nebula
 
     public static <T> TicketType<T> a(String s, Comparator<T> comparator) {
         return new TicketType<>(s, comparator, 0L);
diff --git a/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java b/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java
index a8470b232..a1800ed0d 100644
--- a/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java
+++ b/src/main/java/xianxian/mc/nebula/NebulaWorldConfig.java
@@ -89,4 +89,8 @@ public class NebulaWorldConfig {
 		biomesRecalculatingTag = getString("biomes-recalculating-tag", "1.15.1-1");
 	}
 
+	public boolean loadChunksForTNT = true;
+	private void loadChunksForTNT() {
+	    loadChunksForTNT = getBoolean("load-chunks-for-tnt", true);
+	}
 }
-- 
2.27.0

