From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lovely_xianxian <xyx_dada@outlook.com>
Date: Tue, 24 Dec 2019 19:03:44 +0800
Subject: [PATCH] Configurable EventPriority


diff --git a/.gitignore b/.gitignore
index e431e3435737e28394d81b56568a08b3c3148b9b..017c305b0448650f8dc93d71f2559de4aa7220d8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -30,3 +30,5 @@
 *.ipr
 *.iws
 .idea/
+
+eventhandlers.json
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 0e25119564dfa9cb12f3c5dc5f653d7f2c147a9d..ad6f7057c2285aaa459c53a2c6e5a2b32a707ebc 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -686,12 +686,21 @@ public final class SimplePluginManager implements PluginManager {
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + event + " while not enabled");
         }
-
+        
+        //Nebula start - Configurable EventPriority
+        String methodName = listener.getClass().getCanonicalName()+".eventExecutor("+event.getCanonicalName()+")";
+        EventPriority customedPriority = xianxian.mc.nebula.plugin.EventPriorityConfig.getByName(methodName);
+        if (customedPriority != null)
+        	plugin.getLogger().info(methodName + " is using customed priority " + customedPriority.name());
+        else
+        	customedPriority = priority;
+        //Nebula end
+        
         executor = new co.aikar.timings.TimedEventExecutor(executor, plugin, null, event); // Paper
         if (false) { // Spigot - RL handles useTimings check now // Paper
-            getEventListeners(event).register(new TimedRegisteredListener(listener, executor, priority, plugin, ignoreCancelled));
+            getEventListeners(event).register(new TimedRegisteredListener(listener, executor, customedPriority, plugin, ignoreCancelled)); //Nebula - Configurable EventPriority
         } else {
-            getEventListeners(event).register(new RegisteredListener(listener, executor, priority, plugin, ignoreCancelled));
+            getEventListeners(event).register(new RegisteredListener(listener, executor, customedPriority, plugin, ignoreCancelled)); //Nebula - Configurable EventPriority
         }
     }
 
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index b622cedeeee017f042bcf92485d81832030a8030..c307118a9ccf919983db9340c778c9f8e2df7f89 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -332,12 +332,21 @@ public final class JavaPluginLoader implements PluginLoader {
                     break;
                 }
             }
-
+            
+            //Nebula start - Configurable EventPriority
+            String methodName = method.toGenericString();
+            org.bukkit.event.EventPriority priority = xianxian.mc.nebula.plugin.EventPriorityConfig.getByName(methodName);
+            if (priority == null)
+            	priority = eh.priority();
+            else
+            	plugin.getLogger().info(methodName + " is using custom priority " + priority);
+            //Nebula end
+            
             EventExecutor executor = new co.aikar.timings.TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass); // Paper // Paper (Yes.) - Use factory method `EventExecutor.create()`
             if (false) { // Spigot - RL handles useTimings check now
-                eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
+                eventSet.add(new TimedRegisteredListener(listener, executor, priority, plugin, eh.ignoreCancelled())); //Nebula - Configurable EventPriority
             } else {
-                eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
+                eventSet.add(new RegisteredListener(listener, executor, priority, plugin, eh.ignoreCancelled())); //Nebula - Configurable EventPriority
             }
         }
         return ret;
diff --git a/src/main/java/xianxian/mc/nebula/plugin/EventPriorityConfig.java b/src/main/java/xianxian/mc/nebula/plugin/EventPriorityConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..993754c76ef647b47c7c88f9dd557cb1061c4145
--- /dev/null
+++ b/src/main/java/xianxian/mc/nebula/plugin/EventPriorityConfig.java
@@ -0,0 +1,114 @@
+package xianxian.mc.nebula.plugin;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.logging.Logger;
+
+import org.bukkit.event.EventPriority;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import com.google.common.io.Files;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.google.gson.JsonPrimitive;
+
+public class EventPriorityConfig {
+    private static File configFile;
+    private static Map<String, EventPriority> priorityMap = new HashMap<String, EventPriority>();
+    private static JsonObject priorityCache;
+    private static final Logger LOGGER = Logger.getLogger("EventPriorityConfig");
+    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
+
+    static {
+        configFile = new File("eventhandlers.json");
+        
+        LOGGER.info("Loading priority configuration");
+        
+        if (!configFile.exists()) {
+            try {
+                configFile.createNewFile();
+                LOGGER.info("Priority configuration not found, creating");
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        } else {
+            try (FileReader reader = new FileReader(configFile)) {
+                JsonElement je = new JsonParser().parse(reader);
+                if (je != null) {
+                	if (je.isJsonObject()) {
+                		priorityCache = je.getAsJsonObject();
+                		readFromCache();
+                	} else {
+                		LOGGER.severe("Invalid configuration file format");
+                	}
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        if (priorityCache == null)
+            priorityCache = new JsonObject();
+    }
+    
+    private static void readFromCache() {
+    	priorityCache.entrySet().forEach((e)->{
+    		String name = e.getKey();
+    		JsonElement element = e.getValue();
+    		
+    		if (!element.isJsonPrimitive()) {
+    			LOGGER.severe("Malformed configuration format");
+    		} else {
+    			String priorityName = element.getAsString();
+                if (priorityName.isEmpty() || priorityName.equalsIgnoreCase("NONE")) {
+                    return;
+                }
+                EventPriority priority = EventPriority.valueOf(priorityName);
+                if (priority == null) {
+                    LOGGER.severe(name + " has an invalid priority");
+                } else {
+                	priorityMap.put(name, priority);
+                }
+    		}
+    	});
+    }
+
+    /**
+     * Get custom priority for a listener
+     * @param name such as @{link java.lang.Method#toGenericString}, cannot be null
+     * @return {@link EventPriority} if found, otherwise return null
+     */
+    @Nullable
+    public static EventPriority getByName(@NotNull String name) {
+        String[] parts = name.split(" ");
+        String methodName = name;
+        if (parts.length > 1)
+            methodName = parts[parts.length - 1];
+        EventPriority priority = priorityMap.get(methodName);
+        if (priority != null) {
+        	return priority;
+        } else {
+            priorityCache.add(methodName, new JsonPrimitive("NONE"));
+            save();
+        }
+        return null;
+    }
+
+    public static void save() {
+        try {
+            Files.write(GSON.toJson(priorityCache), configFile, StandardCharsets.UTF_8);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+    }
+}
\ No newline at end of file
