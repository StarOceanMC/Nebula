From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lovely_xianxian <xyx_dada@outlook.com>
Date: Fri, 5 Aug 2022 22:10:15 +0800
Subject: [PATCH] Configurable EventPriority


diff --git a/src/main/java/org/staroceanmc/nebula/config/EventHandlerConfig.java b/src/main/java/org/staroceanmc/nebula/config/EventHandlerConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..76f39740027587c89c8b118000cdf738c24e77da
--- /dev/null
+++ b/src/main/java/org/staroceanmc/nebula/config/EventHandlerConfig.java
@@ -0,0 +1,114 @@
+package org.staroceanmc.nebula.config;
+
+import com.google.common.io.Files;
+import com.google.gson.*;
+import org.bukkit.event.EventPriority;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Logger;
+
+public class EventHandlerConfig {
+    private static File configFile;
+    private static final Map<String, EventPriority> priorityMap = new HashMap<String, EventPriority>();
+    private static JsonObject priorityCache = new JsonObject();
+    private static final Logger LOGGER = Logger.getLogger(EventHandlerConfig.class.getName());
+    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();
+
+    private static void readFromCache() {
+        priorityCache.entrySet().forEach((e) -> {
+            String name = e.getKey();
+            JsonElement element = e.getValue();
+
+            if (!element.isJsonPrimitive()) {
+                LOGGER.severe("Malformed configuration format");
+            } else {
+                String priorityName = element.getAsString();
+                if (priorityName.isEmpty() || priorityName.equalsIgnoreCase("NONE")) {
+                    return;
+                }
+                EventPriority priority = EventPriority.valueOf(priorityName);
+                if (priority == null) {
+                    LOGGER.severe(name + " has an invalid priority");
+                } else {
+                    priorityMap.put(name, priority);
+                }
+            }
+        });
+    }
+
+    /**
+     * Get modified priority for a listener.
+     *
+     * @param name such as @{link java.lang.Method#toGenericString}, cannot be null
+     * @return {@link EventPriority} if found, otherwise return null
+     */
+    @Nullable public static EventPriority getByName(@NotNull String name) {
+        String[] parts = name.split(" ");
+        String methodName = name;
+        if (parts.length > 1)
+            methodName = parts[parts.length - 1];
+        EventPriority priority = priorityMap.get(methodName);
+        if (priority != null) {
+            return priority;
+        } else {
+            priorityCache.add(methodName, new JsonPrimitive("NONE"));
+            save();
+        }
+        return null;
+    }
+
+    @Nullable public static EventPriority getByMethod(@NotNull Method method) {
+        return getByName(method.toGenericString());
+    }
+
+    static void save() {
+        try {
+            if (configFile != null)
+                Files.asCharSink(configFile, StandardCharsets.UTF_8).write(GSON.toJson(priorityCache));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    static void load(String path) {
+        configFile = new File(path);
+
+        LOGGER.config("Loading priority configuration");
+
+        if (!configFile.exists()) {
+            try {
+                Files.createParentDirs(configFile);
+                configFile.createNewFile();
+                LOGGER.config("Priority configuration not found, creating");
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        } else {
+            try (FileReader reader = new FileReader(configFile)) {
+                JsonElement je = JsonParser.parseReader(reader);
+                if (je != null) {
+                    if (je.isJsonObject()) {
+                        priorityCache = je.getAsJsonObject();
+                        readFromCache();
+                    } else {
+                        LOGGER.severe("Invalid configuration file format");
+                    }
+                }
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        if (priorityCache == null)
+            priorityCache = new JsonObject();
+    }
+}
